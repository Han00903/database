Redis란?
- 레디스는 Remote Dictionary Server의 약자로 "키-값" 구조의 비정형 데이터를 저장하고 관리하기 위한 오픈 소스 기반의 비관계형 DB관리 시스템이다.
- 즉 레디스는 데이터 처리 속도가 엄청 빠른 NOSQL 데이터베이스다.
- NoSQL 데이터베이스를 풀어서 얘기하면 Key-Value의 형태로 저장하는 데이터베이스이다.

Redis의 장점
- 레디스는 인메모리에 모든 데이터를 저장하여 데이터의 처리 성능이 굉장히 빠르다.
- MySQl과 같은 RDBMS의 데이터베이스는 대부분 디스크(Disk)에 데이터를 저장한다. 하지만 레디스는 메모리(RAM)에 데이터를 저장하여 디스크보다 메모리에서의 데이터 처리속도가 월등히 빠르다. 
- 이러한 이유로 레디스의 데이터 처리 속도가 RDBMS에 비해 훨씬 빠르다. 

Redis의 주요 사례
- 캐싱(Cashing)
- 세션 관리
- 실시간 분석 및 통계
- 메시지 큐
- 지리공간 인덱싱
- 속도제한
- 실시간 채팅 및 메시징

레디스에 내장된 기능이 다양하다보니 여러 용도로 사용된다. 현업에서 가장 많이 캐싱(데이터 조회 성능 향상)이 사용된다.

Redis 명령어 ++++++> 추가하기

데이터 저장 시 만료기간(TTL) 정하기
- 레디스는 RDBMS와는 다르게 데이터 처리 시 만료시간을 설정할 수 있다. 즉, 영구적으로 데이터를 저장하지 않고 일정 시간이 되면 데이터가 삭제되도록 설정할 수 있다.
- 레디스의 특성 상 메모리 공간이 한정되어있기 떄문에 모든 데이터를 레디스에 저장할 수 없다. 따라서 만료시간(TTL)을 활용해 자주 사용하는 데이터만 레디스에 저장해놓고 쓰는 방식으로 활용한다.

Redis에서 Key네이밍 컨벤션 익히기
- 콜론(:)을 활용해 계층적으로 의미를 구분해서 사용한다.
ex. user:100:profile => user중 PK가 100인 user의 profile
컨벤션을 정했을 떄의 장점
1. 가독성: 데이터의 의미와 용도를 쉽게 파악할 수 있다.
2. 일관성: 컨벤션을 따름으로써 코드의 일관성이 높아지고 유지보수가 쉬워진다.
3. 검색 및 필터링 용이성: 패턴 매칭을 사용해 특정 유형의 Key를 쉽게 찾을 수 있다.
4. 확장성: 서로 다른 Key와 이름이 겹쳐 충돌할 일이 적어진다. 

캐시(Cache), 캐싱(Caching)이란
캐시란 원본 저장소보다 빠르게 가져올 수 있는 임시 데이터 저장소를 의미한다.
캐싱이란 캐시에 접근하여 데이터를 빠르게 가져오는 방식을 의미한다.

데이터를 캐싱할 때 사용하는 전략
Cache Aside(=Look Aside, Lazy Loading)전략
- 데이터를 조회할 떄 주로 사용하는 전략이 Cache Aside 전략이다. Look Aside 전략 또는 Lazy Loading 전략이라고 부른다.
- 즉 Cache Aside전략은 캐시에서 데이터를 확인하고 없다면 DB를 통해 조회해오는 방식이다. 

Write Around 전략
- Cache Aside 전략이 데이터를 어떻게 조회할 지에 대한 전략이었다면 Write Around전략은 데이터를 어떻게 사용할지(저장, 수정, 삭제)에 대한 전략이다.
- Write Around 전략은 Cache Aside 전략과 같이 자주 활용되는 전략이다.
- Write Around 전략은 데이터를 저장할 떄는 레디스에 저장하지 않고 데이터베이스에만 저장하는 방식이다. 데이터를 조회할 떄 레디스에 데이터가 없으면 데이터베이스로부터 데이터를 조회해와서 레디스에 저장시켜주는 방식이다.
- 즉 Write Around 전략은 쓰기(저장, 수정, 삭제)작업을 캐시에 반영하지 않고 DB에만 반영하는 방식을 뜻한다.

Cache Asid, Write Around 전략의 한계점/해결 방법
1. 캐시된 데이터와 DB데이터가 일치하지 않을 수 있다.(데이터의 일관성을 보장할 수 없다.)
- Write Around 전략에 따르면 데이터를 수정할 떄 DB만 업데이트를 시키기 때문에 기존에 저장된 레디스의 데이터 값과 DB의 데이터 값은 다를 수 밖에 없다. 

-> 해결방법: 데이터 조회 성능 개선 목적으로 레디스를 쓰는 경우 데이터의 일관성을 포기하고 성능 향상을 택했다.
  캐시 적용시키기 적절한 데이터
  - 자주조회되는 데이터
  - 잘 변하지 않는 데이터
  - 실시간으로 정확하게 일치하지 않아도 되는 데이터
  그러나 장기간 데이터가 일치하지 않는 건 문제가 될 수 있으므로 적절한 주기로 데이터를 동기화시켜주어야한다. 이때 활용하는 기능이 레디스의 TTL기능(만료시간설정기능)이다. 
  일정 시간이 지나면 데이터가 캐시에서 삭제된다. 그럼 특정 사용자가 조회를 하는 순간 Cache Miss가 발생하므로 Db의 데이터를 새로 조회해와서 캐시에 데이터를 넣게 된다. 즉 데이터가 새롭게 갱신되는 효과가 있다. 


2. 캐시에 저장할 수 있는 공간이 비교적 적다.
- DB는 디스크(Disk)에 저장하여 많은 양을 저장하기 용이하지만 캐시는 메모리(RAM)에 저장하기 때문에 DB에 비해 많은 양의 데이터를 저장할 수 없다. 

-> 해결방법: TTL기능을 활용하면 캐시의 공간을 효율적으로 사용할 수 있다. 왜냐면 자주 조회되지 않는 데이터는 만료 시간에 의해 데이터가 삭제되기 때문이이다.. 

데이터 조회 성능을 개선하는 방법은 다양하다.
[데이터 조회 성능 개선방법]
- SQL 튜닝
- 캐싱 서버 활용(Redis)
- 레플리케이션(Master, Slave 구조)
-  DB 스케일업(CPU, Memory, SSD 등 하드웨어 업그레이드)
- 샤딩

★ 많은 성능 개선방법 중 "SQL 튜닝"을 가장 먼저 고려해야한다.
- SQL 튜닝을 제외한 나머지 방법은 추가적인 시스템을 구성해야한다. 따라서 금전적, 시간적 비용이 추가적으로 발생한다.
- 조금 더 복잡해진 시스템 구조로 인해 관리 비용이 늘어난다. 그에 비해 SQL 튜닝은 기존의 시스템 변경 없이 성능을 개선할 수 있다.
- 근본적인 문제를 해결하는 방법이 SQL 튜닝일 가능성이 높지만 SQL 자체가 비효율적으로 작성됐다면 아무리 시스템적으로 성능을 개선한다고 하더라도 한계가 존재한다.
- 하지만 SQL 튜닝을 통해 기본적으로 성능을 향상시킨다면 시스템적인 성능 개선이 필요없거나 훨씬 간단한 개선으로 큰 성능 개선 효과를 얻을 수 ㅇ있다.


＃＃ JSCODE 박재성님의 유튜브롤 보고 정리한 내용입니다.



